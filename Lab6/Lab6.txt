// Lab6.c
// Runs on TM4C123
// Use SysTick interrupts to implement a 4-key digital piano
// MOOC lab 13 or EE319K lab6 starter
// Program written by: Keshav Narasimhan & Sanjay Gorur
// Date Created: 3/6/17 
// Last Modified: 1/17/21  
// Lab number: 6
// Hardware connections
// TO STUDENTS "REMOVE THIS LINE AND SPECIFY YOUR HARDWARE********


#include <stdint.h>
#include "../inc/tm4c123gh6pm.h"
#include "../inc/LaunchPad.h"
#include "../inc/CortexM.h"
#include "Sound.h"
#include "Key.h"
#include "Music.h"
#include "TExaS.h"

void DAC_Init(void);         // your lab 6 solution
void DAC_Out(uint8_t data);  // your lab 6 solution
uint8_t Testdata;

// lab video Lab6_voltmeter
int voltmetermain(void){ //voltmetermain(void){     
  TExaS_Init(SW_PIN_PE3210,DAC_PIN_PB3210,ScopeOn);    // bus clock at 80 MHz
  DAC_Init(); // your lab 6 solution
  Testdata = 63;
  EnableInterrupts();
  while(1){                
    Testdata = (Testdata+1)&0x3F;
    DAC_Out(Testdata);  // your lab 6 solution
  }
}

// lab video Lab6_static
int staticmain(void){   uint32_t last,now;  
  TExaS_Init(SW_PIN_PE3210,DAC_PIN_PB3210,ScopeOn);    // bus clock at 80 MHz
  LaunchPad_Init();
  DAC_Init(); // your lab 6 solution
  Testdata = 63;
  EnableInterrupts();
  last = LaunchPad_Input();
  while(1){                
    now = LaunchPad_Input();
    if((last != now)&&now){
       Testdata = (Testdata+1)&0x3F;
       DAC_Out(Testdata); // your lab 6 solution
    }
    last = now;
    Clock_Delay1ms(25);   // debounces switch
  }
}



//**************Lab 6 solution below*******************

uint32_t h_beat = 0;
void HeartBeat()
{
	h_beat++;
	if (h_beat & 0x10000)
	{
		GPIO_PORTF_DATA_R ^= 0x04;
	}
}

int main(void){      
  TExaS_Init(SW_PIN_PE3210,DAC_PIN_PB3210,ScopeOn);    // bus clock at 80 MHz
  Key_Init();
  LaunchPad_Init();
  Sound_Init();
  // other initialization
	SYSCTL_RCGCGPIO_R |= 0x20;
	__nop();
	__nop();
	
	GPIO_PORTF_DIR_R |= 0x04;
	GPIO_PORTF_DEN_R |= 0x04;
	
	EnableInterrupts();
	
  while(1){ 
		
		HeartBeat();
		
		uint8_t btn_input = Key_In();
		
		if (btn_input == 0)
		{
			Sound_Start(0);								// No Sound
		}
		else if (btn_input == 1)
		{
			Sound_Start(1790);						// F4 = 698.5 Hz
		}
		else if (btn_input > 1 && btn_input < 4)
		{
			Sound_Start(1420);						// A4 = 880 Hz
		}
		else if (btn_input >= 4 && btn_input < 8)
		{
			Sound_Start(1194);						// C5 = 1046.5 Hz
		}
		else
		{
			Sound_Start(895);							// F5 = 1396.5 Hz
		}
  }           
}




// DAC.c
// This software configures DAC output
// Lab 6 requires a minimum of 4 bits for the DAC, but you could have 5 or 6 bits
// Runs on TM4C123
// Program written by: Keshav Narasimhan & Sanjay Gorur
// Date Created: 3/6/17 
// Last Modified: 1/17/21 
// Lab number: 6
// Hardware connections
// TO STUDENTS "REMOVE THIS LINE AND SPECIFY YOUR HARDWARE********

#include <stdint.h>
#include "../inc/tm4c123gh6pm.h"
#include "DAC.h"
// Code files contain the actual implemenation for public functions
// this file also contains an private functions and private data

// **************DAC_Init*********************
// Initialize 4-bit or 6-bit DAC, called once 
// Input: none
// Output: none
void DAC_Init(void){
	
	/*
	* DAC Pins: Port B pins 5 - 0
	*/
	
	// turn on Port B Clock
	SYSCTL_RCGCGPIO_R |= 0x02;
	
	// let the clock stabilize
	__nop();
	__nop();
	
	// enable DIR & DEN for Port B
	GPIO_PORTB_DIR_R |= 0x3F;
	GPIO_PORTB_DEN_R |= 0x3F;
	
}

// **************DAC_Out*********************
// output to DAC
// Input: 4-bit data, 0 to 15 
// or     6-bit data, 0 to 63
// Input=n is converted to n*3.3V/15
// or Input=n is converted to n*3.3V/63
// Output: none
void DAC_Out(uint32_t data){
	
	GPIO_PORTB_DATA_R = data;
	
}





// Sound.c
// This module contains the SysTick ISR that plays sound
// Runs on TM4C123
// Program written by: Keshav Narasimhan & Sanjay Gorur
// Date Created: 3/6/17 
// Last Modified: 1/17/21 
// Lab number: 6
// Hardware connections
// TO STUDENTS "REMOVE THIS LINE AND SPECIFY YOUR HARDWARE********

// Code files contain the actual implemenation for public functions
// this file also contains an private functions and private data
#include <stdint.h>
#include "DAC.h"
#include "../inc/tm4c123gh6pm.h"


// Global Vars
uint8_t ind = 0;
uint8_t sin_wave[64] = {32, 35, 38, 41, 44, 47, 49, 52, 54, 56, 58, 
												59, 61, 62, 62, 63, 63, 63, 62, 62, 61, 59, 
												58, 56, 54, 52, 49, 47, 44, 41, 38, 35, 32, 
												29, 26, 23, 20, 17, 15, 12, 10, 8, 6, 5, 3, 
												2, 2, 1, 1, 1, 2, 2, 3, 5, 6, 8, 10, 12, 15,
												17, 20, 23, 26, 29};


// **************Sound_Init*********************
// Initialize digital outputs and SysTick timer
// Called once, with sound/interrupts initially off
// Input: none
// Output: none
void Sound_Init(void){
  
	DAC_Init();
	NVIC_ST_CTRL_R = 0x00;
	NVIC_ST_CURRENT_R = 0x00;
	NVIC_SYS_PRI3_R = (NVIC_SYS_PRI3_R & 0x00FFFFFF) | 0x20000000; // Set priority level to 1
  
}

// **************Sound_Start*********************
// Start sound output, and set Systick interrupt period 
// Sound continues until Sound_Start called again, or Sound_Off is called
// This function returns right away and sound is produced using a periodic interrupt
// Input: interrupt period
//           Units of period to be determined by YOU
//           Maximum period to be determined by YOU
//           Minimum period to be determined by YOU
//         if period equals zero, disable sound output
// Output: none
void Sound_Start(uint32_t period){
  
	if (period == 0)
	{
		NVIC_ST_RELOAD_R = 0;
		return;
	}
	NVIC_ST_RELOAD_R = period - 1;
	NVIC_ST_CTRL_R |= 0x07;

}

// **************Sound_Voice*********************
// Change voice
// EE319K optional
// Input: voice specifies which waveform to play
//           Pointer to wave table
// Output: none
void Sound_Voice(const uint8_t *voice){
  // optional
}
// **************Sound_Off*********************
// stop outputing to DAC
// Output: none
void Sound_Off(void){
  
	NVIC_ST_CTRL_R = 0x00;

}
// **************Sound_GetVoice*********************
// Read the current voice
// EE319K optional
// Input: 
// Output: voice specifies which waveform to play
//           Pointer to current wavetable
const uint8_t *Sound_GetVoice(void){
 // write this
 // optional
  return 0;
}

// Interrupt service routine
// Executed every 12.5ns*(period)
void SysTick_Handler(void){
    
	ind = (ind + 1) % 64;
	DAC_Out(sin_wave[ind]);

}





// Key.c
// This software configures the off-board piano keys
// Lab 6 requires a minimum of 3 keys, but you could have more
// Runs on TM4C123
// Program written by: Keshav Narasimhan & Sanjay Gorur
// Date Created: 3/6/17 
// Last Modified: 1/17/21  
// Lab number: 6
// Hardware connections
// TO STUDENTS "REMOVE THIS LINE AND SPECIFY YOUR HARDWARE********

// Code files contain the actual implemenation for public functions
// this file also contains an private functions and private data
#include <stdint.h>
#include "../inc/tm4c123gh6pm.h"
#include "Key.h"

// **************Key_Init*********************
// Initialize piano key inputs on PA5-2 PB3-0 or PE3-0
// Input: none 
// Output: none
void Key_Init(void){ 
  
	/*
	* Key Pins: Port E pins 3 - 0
	*/
	
	// turn on Port E Clock
	SYSCTL_RCGCGPIO_R |= 0x10;
	
	// let the clock stabilize
	__nop();
	__nop();
	
	// enable DIR & DEN for Port E
	GPIO_PORTE_DIR_R &= ~0x0F;
	GPIO_PORTE_DEN_R |= 0x0F;

}
// **************Key_In*********************
// Input from piano key inputs on PA5-2 PB3-0 or PE3-0
// Input: none 
// Output: 0 to 15 depending on keys
//   0x01 is just Key0, 0x02 is just Key1, 0x04 is just Key2, 0x08 is just Key3
uint32_t Key_In(void){ 
  
	return (GPIO_PORTE_DATA_R & 0x0F);
	
}

